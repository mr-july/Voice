apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: "../artifacts.gradle"

android {

  compileSdkVersion buildConfig.compileSdk

  defaultConfig {
    applicationId "de.ph1b.audiobook"
    minSdkVersion buildConfig.minSdk
    targetSdkVersion buildConfig.targetSdk

    versionCode buildConfig.version.code
    versionName buildConfig.version.name

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    ndk {
      abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a', 'mips'
    }
  }

  signingConfigs {
    release {
      def props = new Properties()
//      def propsFile = rootProject.file('signing.properties')
//      props.load(new FileInputStream((propsFile)))
//      storeFile = rootProject.file(props['STORE_FILE'])
//      storePassword = props['STORE_PASSWORD']
//      keyAlias = props['KEY_ALIAS']
//      keyPassword = props['KEY_PASSWORD']
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro'
      signingConfig signingConfigs.release
      multiDexEnabled false
    }
    debug {
      minifyEnabled false
      shrinkResources false
      ext.enableCrashlytics = false
      multiDexEnabled true
    }
  }

  testOptions.unitTests.returnDefaultValues = true

  lintOptions.abortOnError = false

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  //noinspection GroovyMissingReturnStatement
  packagingOptions {
    exclude 'META-INF/rxjava.properties'
  }

  flavorDimensions "free"
  productFlavors {
    opensource {
      dimension "free"
    }
    proprietary {
      dimension "free"
    }
  }
}

androidExtensions {
  experimental = true
}

dependencies {
  implementation project(":core")
  implementation project(":common")
  implementation project(":data")
  implementation project(":covercolorextractor")

  implementation deps.chapterReader

  implementation deps.Support.appCompat
  implementation deps.Support.recyclerView
  implementation deps.Support.design
  implementation deps.Support.transitions
  implementation deps.Support.constraintLayout

  implementation deps.picasso

  implementation deps.materialDialogs
  implementation deps.materialCab

  implementation deps.floatingActionButton

  proprietaryImplementation(deps.crashlytics) {
    transitive = true
  }

  implementation deps.Dagger.core
  implementation deps.Dagger.android
  kapt deps.Dagger.compiler
  kapt deps.Dagger.androidProcessor

  implementation deps.androidKtx

  testImplementation deps.junit
  testImplementation deps.truth
  testImplementation deps.mockito
  testImplementation deps.mockitoKotlin

  androidTestImplementation deps.Support.testRunner
  androidTestImplementation deps.truth

  implementation deps.rxJava
  implementation deps.rxAndroid
  implementation deps.rxPreferences

  implementation deps.Kotlin.std
  implementation deps.Kotlin.coroutines
  implementation deps.Kotlin.coroutinesAndroid

  implementation deps.timber

  implementation deps.ExoPlayer.core
  implementation deps.ExoPlayer.flac
  implementation deps.ExoPlayer.opus

  implementation deps.Conductor.base
  implementation deps.Conductor.support
  implementation deps.Conductor.lifecycle

  implementation deps.moshi

  implementation deps.tapTarget
}

// task that is an alias for f-droid
task fdroid(dependsOn: ':app:assembleOpensourceRelease')
task release(dependsOn: ':app:assembleProprietaryRelease')

kotlin {
  experimental {
    coroutines "enable"
  }
}
